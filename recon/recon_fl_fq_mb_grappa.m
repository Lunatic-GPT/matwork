%function recon_fl_fq_mb_grappa(fmb,fsb,fnois,interp_factor,do_retro,nphase,no_recon)
% if fsb is an cell array; the position should be in ascending order, i.e. from foot
% to head.

function recon_fl_fq_mb_grappa(fsb,fmb,interp_factor,nphase,f_fake,f_MON,maxRate)
remove_os=true;


fsb=str2cell(fsb);


prefix_mb=strtok(fmb,'.');
prefix_sb=strtok(fsb{1},'.');

[tmp,fsbname]=fileparts(prefix_sb);
[tmp,fmbname]=fileparts(prefix_mb);

prefix_mb_dir=fullfile(prefix_mb,fmbname);

prefix_sb_dir=fullfile(prefix_sb,fsbname);

if ~exist([prefix_sb,'.mat'],'file')
    for i=1:length(fsb)
        if i==1
            [dsb,lin_sb]=readMeasDat(fsb{i},inf,0,remove_os);
        else
            [dsb_tmp,lin_sb_tmp]=readMeasDat(fsb{i},inf,0,remove_os);
            lin_sb=cat(2,lin_sb(:)',lin_sb_tmp(:)');
            
            dsb=cat(2,dsb,dsb_tmp);
            
        end
    end
    save([prefix_sb,'.mat'],'dsb','lin_sb');
    
else
    load([prefix_sb,'.mat']);
    if exist('Data','var')
        dsb=Data;
        clear Data;
        lin_sb=Line;
        clear Line;
        ushSet_sb=Set;
        Slice_sb=Slice;
    end
end

%fmb='meas_MID28_fl_fq_retroZ_mb_Tone_FID13919.dat';

if ~exist([prefix_mb,'.mat'],'file')
    
[dmb,lin_mb,par_mb,sl_mb,ushSet,timeStamp,freePara]=readMeasDat(fmb,inf,0,true);
save([prefix_mb,'.mat'],'dmb','lin_mb','par_mb','sl_mb','ushSet','freePara');

else
    tmp=load([prefix_mb,'.mat']);
    
    if ~exist('dmb','var')  % mat file generated by check_fl_fq_cardiac.m
        
      if isfield(tmp,'dsb')  
      dmb=tmp.dsb;
      lin_mb=tmp.lin;
      par_mb=tmp.par;
      sl_mb=tmp.sl;
      ushSet=tmp.ushSet;
      freePara=tmp.freePara;
      clear tmp;
      else
      dmb=tmp.Data;  % new format
      lin_mb=tmp.Line;
      par_mb=tmp.Partition;
      sl_mb=tmp.Slice;
      ushSet=tmp.Set;
      freePara=tmp.freePara;
      clear tmp;
          
          
      end
    end
end

if exist('no_recon','var') && no_recon
    return;
end

%[dmb,lin_mb,par_mb,sl_mb,ushSet,freePara]=readMeasDat(fmb,inf,0,true);
%fmb='meas_MID78_fl_fqZ_MB_TE14_5ms_FA35_FID11035.mat';
%fsb='meas_MID76_fl_fqZ_SBRef_TE13_2ms_FA35_FID11033.mat';
%%


if length(fsb)==1
    nsl=readsPar([prefix_sb_dir,'.pro'],'lConc');
else
    nsl=length(fsb);
end

af=readsPar([prefix_mb_dir,'.pro'],'alFree[6]');
if isempty(af)  %new version sequence
af=readsPar([prefix_mb_dir,'.pro'],'alFree[32]');
end
nave=readsPar([prefix_mb_dir,'.pro'],'lAverages');
nave_sb=readsPar([prefix_sb_dir,'.pro'],'lAverages');

seg=readsPar([prefix_mb_dir,'.pro'],'lSegments');

pat=readsPar([prefix_mb_dir,'.pro'],'lAccelFactPE');
%% sort physiology data

nvenc=max(ushSet)+1;



try
    phaseStab=readsPar([prefix_mb_dir,'.pro'],'ucPhaseStabilize');
    
    if strcmp(phaseStab{1},'0x1')
        phaseStab=true;
    else
        phaseStab=false;
    end
catch
    phaseStab=false;
end

if  phaseStab
    dmb2=reorder_fl_fq_data_phaseStabOn(dmb,lin_mb,prefix_mb_dir,nvenc,do_retro,freePara(:,4),nphase,false);  
else
    dmb2=reorder_fl_fq_data(dmb,lin_mb,prefix_mb_dir,nvenc,freePara(:,4),nphase,f_fake,f_MON,false,maxRate);
end

sequenceName=readsPar([prefix_sb_dir,'.pro'],'tSequenceFileName');

if ~isempty(strfind(sequenceName{1},'fl_fq'))    
    nvenc_sb=max(ushSet)+1;
else
    nvenc_sb=1;
end

if length(fsb)==1
    if exist('Slice_sb','var')
        dsb2=reorder_fl_fq_sbRef(dsb,lin_sb,prefix_sb_dir,nvenc_sb,nsl,true,Slice_sb);
    else
        dsb2=reorder_fl_fq_sbRef(dsb,lin_sb,prefix_sb_dir,nvenc_sb,nsl);
    end
else
    
    
    dsb2=reorder_fl_fq_sbRef(dsb,lin_sb,prefix_sb_dir,nvenc_sb,nsl,false);
end
    
%%
dsb2=dsb2(:,:,:,:,1,1);  % only need one data set
nline=size(dsb2,2);

for i=1:nsl
    
f=exp(1i*(0:nline-1)*2*pi/af*(i-1-(nsl-1)/2));
sz=size(dsb2);
dsb2(:,:,i,:)=dsb2(:,:,i,:).*repmat(f,[sz(1),1,1,sz(4)]);

end


dsb2=fft1c(dsb2,1);   % k space

dmb2=fft1c(dmb2,1);  %k space



%%
tmp=sos(dsb2,4);
[tmp2,ind_max]=max(tmp(:));
ind_max=ind2subb(size(tmp),ind_max);

%ind_max=[141,273];
lc=32;  % calibration lines
iread=ind_max(1)-lc/2:ind_max(1)+lc/2-1;

    Ks=[-2,-1,0,1,2];
    Ksy=[-2,0,2];
    iph=ind_max(2)-lc/2:ind_max(2)+lc/2-1;
    
    iph(iph<1)=[];
    iph(iph>size(dsb2,2))=[];
    kernel=sliceGRAPPAKernel(dsb2(iread,iph,:,:),Ks,Ksy);

%%
res=zeros(size(dmb2,1),size(dmb2,2),nsl,32,nvenc,nphase,'single');

for ip=1:nphase
 for i=1:nvenc
   res(:,:,:,:,i,ip)=sliceGRAPPAKernel(dmb2(:,:,1,:,i,ip),Ks,Ksy,kernel);
 end
end

%%

res2=res; %temprary
if pat>1
    lin2_unq=sort(unique(lin_mb(:)));
    lin2_unq_sb=sort(unique(lin_sb(:)));
   
    npe=size(dmb2,2);
    dmb2_mean=mean(dmb2(:,:,:,:,1,:),6);
    
    for i=1:nphase
        %dsb2(:,:,:,:,:,i)
        [tmp,res2(:,:,:,:,:,i)]=recon_grappa2D(res(:,lin2_unq+1,:,:,:,i),lin2_unq+1,npe,dsb2(:,lin2_unq_sb+1,:,:),lin2_unq_sb+1); 
    end

end

%%
im_mb=zeros(size(res2),'single');

for i=1:size(res2,3)
    
    fall_mb=exp(1i*(0:size(res2,2)-1)*2*pi/af*(i-1-(nsl-1)/2));
    fall_mb=repmat(fall_mb,[size(res2,1),1]);
    
    for j=1:size(res2,4)
        for k=1:size(res2,5)
            for ip=1:nphase
                
                im_mb(:,:,i,j,k,ip)=ifft2c(res2(:,:,i,j,k,ip).*conj(fall_mb));
                
            end
        end
        
    end
    
end
    mid=strtok_no(prefix_mb,'_',2);
    dsb_ref=dsb(:,1:32);
    save(['recon_',mid,'.mat'],'im_mb','dsb_ref','mid','interp_factor','-v7.3');
    
    %mkdir(prefix_mb);
    cur_dir=cd(prefix_mb);
    %movefile(fullfile('..',[prefix_mb,'.pro']),'.');
    %movefile(fullfile('..',[prefix_mb,'.xprotocol']),'.');
    
    
    
    do_interp_dim12(im_mb,interp_factor,mid,dsb(:,1:32));
    
    
    cd(cur_dir);



